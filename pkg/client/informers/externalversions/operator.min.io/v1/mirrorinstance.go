// This file is part of MinIO Console Server
// Copyright (c) 2020 MinIO, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// Code generated by informer-gen. DO NOT EDIT.

package v1

import (
	"context"
	time "time"

	operatorminiov1 "github.com/minio/minio-operator/pkg/apis/operator.min.io/v1"
	versioned "github.com/minio/minio-operator/pkg/client/clientset/versioned"
	internalinterfaces "github.com/minio/minio-operator/pkg/client/informers/externalversions/internalinterfaces"
	v1 "github.com/minio/minio-operator/pkg/client/listers/operator.min.io/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

// MirrorInstanceInformer provides access to a shared informer and lister for
// MirrorInstances.
type MirrorInstanceInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() v1.MirrorInstanceLister
}

type mirrorInstanceInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
	namespace        string
}

// NewMirrorInstanceInformer constructs a new informer for MirrorInstance type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewMirrorInstanceInformer(client versioned.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredMirrorInstanceInformer(client, namespace, resyncPeriod, indexers, nil)
}

// NewFilteredMirrorInstanceInformer constructs a new informer for MirrorInstance type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredMirrorInstanceInformer(client versioned.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.OperatorV1().MirrorInstances(namespace).List(context.TODO(), options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.OperatorV1().MirrorInstances(namespace).Watch(context.TODO(), options)
			},
		},
		&operatorminiov1.MirrorInstance{},
		resyncPeriod,
		indexers,
	)
}

func (f *mirrorInstanceInformer) defaultInformer(client versioned.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredMirrorInstanceInformer(client, f.namespace, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc}, f.tweakListOptions)
}

func (f *mirrorInstanceInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&operatorminiov1.MirrorInstance{}, f.defaultInformer)
}

func (f *mirrorInstanceInformer) Lister() v1.MirrorInstanceLister {
	return v1.NewMirrorInstanceLister(f.Informer().GetIndexer())
}
